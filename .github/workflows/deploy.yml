name: Deploy Pomodoro Timer

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

  terraform:
    name: Terraform
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.terraform-outputs.outputs.bucket_name }}
      cloudfront_id: ${{ steps.terraform-outputs.outputs.cloudfront_id }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME || 'pomodoro-timer-app' }}
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ./terraform
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME || 'pomodoro-timer-app' }}
          TF_VAR_environment: 'prod'

      - name: Export Terraform Outputs
        if: success()
        id: terraform-outputs
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          echo "Terraform outputs:"
          terraform output || echo "No terraform outputs found"

          # Extract bucket name with error handling
          BUCKET_NAME=$(terraform output -raw website_bucket_name 2>/dev/null || echo "")
          if [ -z "$BUCKET_NAME" ]; then
            echo "WARNING: website_bucket_name output is empty, using fallback value"
            BUCKET_NAME="${{ secrets.S3_BUCKET_NAME || 'ac-pomodoro-timer-app' }}"
          fi
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "Using bucket name: $BUCKET_NAME"

          # Extract CloudFront ID with error handling
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          if [ -z "$CLOUDFRONT_ID" ]; then
            echo "WARNING: cloudfront_distribution_id output is empty, using fallback value"
            CLOUDFRONT_ID="${{ env.CLOUDFRONT_DISTRIBUTION_ID || secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
          fi
          echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          echo "Using CloudFront ID: $CLOUDFRONT_ID"

  build-and-deploy:
    name: Build and Deploy
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    env:
      S3_BUCKET: ${{ needs.terraform.outputs.bucket_name || secrets.S3_BUCKET_NAME || 'ac-pomodoro-timer-app' }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ needs.terraform.outputs.cloudfront_id || secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build app
        run: |
          npm run build
          # Ensure the output directory is created
          if [ ! -d "out" ] && [ -f "next.config.js" ] && grep -q "export" next.config.js; then
            echo "Next.js static export is configured but 'out' directory not found"
            ls -la
          fi
        env:
          NEXT_EXPORT: true

      - name: Debug build output
        run: |
          echo "Listing root directory:"
          ls -la
          echo "Looking for build output directories:"
          find . -maxdepth 2 -type d -name "out" -o -name ".next" -o -name "build"
          echo "S3 bucket value: $S3_BUCKET"
          echo "CloudFront distribution ID: $CLOUDFRONT_DISTRIBUTION_ID"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        run: |
          # Check which output directory exists and use that
          if [ -d "out" ]; then
            echo "Using out/ directory"
            aws s3 sync out/ s3://${{ env.S3_BUCKET }} --delete
          elif [ -d ".next" ]; then
            # For Next.js SSG with "output: 'export'" in next.config.js but different output structure
            if [ -d ".next/static" ]; then
              echo "Using .next/ directory"
              aws s3 sync .next/ s3://${{ env.S3_BUCKET }} --delete
            fi
          elif [ -d "build" ]; then
            echo "Using build/ directory"
            aws s3 sync build/ s3://${{ env.S3_BUCKET }} --delete
          else
            echo "ERROR: Could not find build output directory"
            echo "Current directory content:"
            ls -la
            exit 1
          fi

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
